type Constructor<T = {}> = new (...args: any[]) => T;

const expectationMixIn = <TBase extends Constructor>(Base: TBase) =>
    class extends Base {
        public mode: number;
        //전체 공의 개수 중에서 해당색깔의 공의 기댓값
        expectedExceptedLineCount(mode: number = this.mode):number[] {
            const pos = [
                0.1325957083189074,
                0.5249193989976747,
                0.3149148072574051,
                0.027482302156153545,
                0.00008778326985927667
              ];
              return pos.map(value => value * mode);
        }
        expectedLineCount(mode: number = this.mode): number[] {//1~9, 10~19, 20~29, 30~39, 40~45
            const pos = [9 / 45, 10 / 45, 10 / 45, 10 / 45, 6 / 45];
            return pos.map(value => value * (6 * mode));
        }
        //십의자리 합의 기댓값
        expectedSum$10(mode: number = this.mode): number[] { // 0~24
            const pos = [
                0.000010312999535915022, 0.0001546949930387253,
                0.0008508224617129892, 0.0029392048677357807,
                0.007904914144278862, 0.017339098791169124,
                0.032559612820531714, 0.053369772598360225,
                0.07763478722072029, 0.10118304837533425,
                0.11906210635649093, 0.12688304321883448,
                0.12278178429624828, 0.10791080728687083,
                0.0859584828104397, 0.06182495893216257,
                0.03991683302517108, 0.022905908612091255,
                0.011505133172745197, 0.004955396277007169,
                0.0017653645277014535, 0.00048618426383599387,
                0.00009023874593925643, 0.000007366428239939301,
                1.2277380399898834e-7
            ];
            return pos.map(value => value * (mode));
        }
        //홀수갯수의 기댓값
        expectedOddCount(mode: number = this.mode): number[] {
            const pos = [
                0.006675305854250784,
                0.04885110193338073,
                0.15321481970014864,
                0.2669652161441983,
                0.2790999986962073,
                0.17507181736398456,
                0.06100987574805521,
                0.009111864559774478
            ];
            return pos.map(value => value * (mode));
        }
        expected$3Count(mode: number = this.mode): number[] {
            const pos = [
                0.05852766346593512,
                0.20484682213077288,
                0.30727023319615926,
                0.25605852766346604,
                0.12802926383173296,
                0.03840877914951989,
                0.006401463191586647,
                0.00045724737082761756
            ];
            return pos.map(value => value * (mode));
        }
        expectedAC(mode: number = this.mode): number[] {
            const pos = [
                0.000022099284719817902,
                0.000105339923831132,
                0.0009665981588840352,
                0.0032279688547414017,
                0.012702300535539333,
                0.029465467412149206,
                0.10108188276083908,
                0.14096519853751846,
                0.3285034118840131,
                0.19756441327626806,
                0.18539531937149634
              ];
            return pos.map(value => value * (mode));
        }
        expectedDiffMaxMinData(mode: number = this.mode): number[] { //5~44
            const pos = [
                0.000004910952159959534, 0.000023940891779802728,
                0.00006998106827942335, 0.0001589920761786899,
                0.0003093899860774506, 0.0005414324756355386,
                0.0008766049605527768, 0.001337006725548983,
                0.0019447370553439753, 0.0027212813656375765,
                0.00368689733408962, 0.004860001031299953,
                0.006256553051788446, 0.00788944464497499,
                0.009767883846159512, 0.011896781607501971,
                0.014276137929002364, 0.01690042798948074,
                0.019757988277557193, 0.022830402722631878,
                0.026091888825865002, 0.02950868379115685,
                0.033038430656127764, 0.03662956442309817,
                0.04022069819006858, 0.043740009281699584,
                0.04710462538029186, 0.050220010656766186,
                0.05297935190164345, 0.05526294465602463,
                0.056937579342570835, 0.057855927396483264,
                0.057855927396483264, 0.0567601711957923,
                0.054375290053111945, 0.050491340763603954,
                0.04488119178987018, 0.03729990939293265,
                0.02748414376321353, 0.015151515151515152
            ];
            return pos.map(value => value * mode);
        }
        expectedCarry(mode: number = this.mode): number[] {
            const pos = [
                0.40056463672459136,
                0.4241272624142732,
                0.15147402229081186,
                0.02244059589493509,
                0.0013646308314487555,
                0.00002872907013576327,
                1.2277380399898834e-7
            ];
            return pos.map(value => value * mode);
        }
    };

export default expectationMixIn;